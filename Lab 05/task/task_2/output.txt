# -> SPECIAL CHAR
include -> IDENTIFIER
< -> LESS_THAN
stdio -> IDENTIFIER
. -> SPECIAL CHAR
h -> IDENTIFIER
> -> GREATER_THAN
 -> SPECIAL CHAR
 -> SPECIAL CHAR
void -> KEYWORD_VOID
bubbleSort -> IDENTIFIER
( -> LEFT_PAREN
int -> KEYWORD_INT
arr -> IDENTIFIER
[ -> LEFT_BRACKET
] -> RIGHT_BRACKET
, -> COMMA
int -> KEYWORD_INT
n -> IDENTIFIER
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
for -> KEYWORD_FOR
( -> LEFT_PAREN
int -> KEYWORD_INT
i -> IDENTIFIER
= -> ASSIGN
0 -> INT_LITERAL
; -> SEMICOLON
i -> IDENTIFIER
< -> LESS_THAN
n -> IDENTIFIER
- -> MINUS
1 -> INT_LITERAL
; -> SEMICOLON
i -> IDENTIFIER
+ -> PLUS
+ -> PLUS
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
for -> KEYWORD_FOR
( -> LEFT_PAREN
int -> KEYWORD_INT
j -> IDENTIFIER
= -> ASSIGN
0 -> INT_LITERAL
; -> SEMICOLON
j -> IDENTIFIER
< -> LESS_THAN
n -> IDENTIFIER
- -> MINUS
i -> IDENTIFIER
- -> MINUS
1 -> INT_LITERAL
; -> SEMICOLON
j -> IDENTIFIER
+ -> PLUS
+ -> PLUS
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
if -> KEYWORD_IF
( -> LEFT_PAREN
arr -> IDENTIFIER
[ -> LEFT_BRACKET
j -> IDENTIFIER
] -> RIGHT_BRACKET
> -> GREATER_THAN
arr -> IDENTIFIER
[ -> LEFT_BRACKET
j -> IDENTIFIER
+ -> PLUS
1 -> INT_LITERAL
] -> RIGHT_BRACKET
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
int -> KEYWORD_INT
temp -> IDENTIFIER
= -> ASSIGN
arr -> IDENTIFIER
[ -> LEFT_BRACKET
j -> IDENTIFIER
] -> RIGHT_BRACKET
; -> SEMICOLON
 -> SPECIAL CHAR
arr -> IDENTIFIER
[ -> LEFT_BRACKET
j -> IDENTIFIER
] -> RIGHT_BRACKET
= -> ASSIGN
arr -> IDENTIFIER
[ -> LEFT_BRACKET
j -> IDENTIFIER
+ -> PLUS
1 -> INT_LITERAL
] -> RIGHT_BRACKET
; -> SEMICOLON
 -> SPECIAL CHAR
arr -> IDENTIFIER
[ -> LEFT_BRACKET
j -> IDENTIFIER
+ -> PLUS
1 -> INT_LITERAL
] -> RIGHT_BRACKET
= -> ASSIGN
temp -> IDENTIFIER
; -> SEMICOLON
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
