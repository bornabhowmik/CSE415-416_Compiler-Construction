# -> SPECIAL CHAR
include -> IDENTIFIER
< -> LESS_THAN
stdio -> IDENTIFIER
. -> SPECIAL CHAR
h -> IDENTIFIER
> -> GREATER_THAN
 -> SPECIAL CHAR
 -> SPECIAL CHAR
int -> KEYWORD_INT
binarySearch -> IDENTIFIER
( -> LEFT_PAREN
int -> KEYWORD_INT
arr -> IDENTIFIER
[ -> LEFT_BRACKET
] -> RIGHT_BRACKET
, -> COMMA
int -> KEYWORD_INT
n -> IDENTIFIER
, -> COMMA
int -> KEYWORD_INT
target -> IDENTIFIER
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
int -> KEYWORD_INT
low -> IDENTIFIER
= -> ASSIGN
0 -> INT_LITERAL
, -> COMMA
high -> IDENTIFIER
= -> ASSIGN
n -> IDENTIFIER
- -> MINUS
1 -> INT_LITERAL
; -> SEMICOLON
 -> SPECIAL CHAR
while -> KEYWORD_WHILE
( -> LEFT_PAREN
low -> IDENTIFIER
<= -> REL_OP
high -> IDENTIFIER
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
int -> KEYWORD_INT
mid -> IDENTIFIER
= -> ASSIGN
( -> LEFT_PAREN
low -> IDENTIFIER
+ -> PLUS
high -> IDENTIFIER
) -> RIGHT_PAREN
/ -> DIVIDE
2 -> INT_LITERAL
; -> SEMICOLON
 -> SPECIAL CHAR
if -> KEYWORD_IF
( -> LEFT_PAREN
arr -> IDENTIFIER
[ -> LEFT_BRACKET
mid -> IDENTIFIER
] -> RIGHT_BRACKET
== -> EQUALS
target -> IDENTIFIER
) -> RIGHT_PAREN
 -> SPECIAL CHAR
return -> KEYWORD_RETURN
mid -> IDENTIFIER
; -> SEMICOLON
 -> SPECIAL CHAR
else -> KEYWORD_Else
if -> KEYWORD_IF
( -> LEFT_PAREN
arr -> IDENTIFIER
[ -> LEFT_BRACKET
mid -> IDENTIFIER
] -> RIGHT_BRACKET
< -> LESS_THAN
target -> IDENTIFIER
) -> RIGHT_PAREN
 -> SPECIAL CHAR
low -> IDENTIFIER
= -> ASSIGN
mid -> IDENTIFIER
+ -> PLUS
1 -> INT_LITERAL
; -> SEMICOLON
 -> SPECIAL CHAR
else -> KEYWORD_Else
 -> SPECIAL CHAR
high -> IDENTIFIER
= -> ASSIGN
mid -> IDENTIFIER
- -> MINUS
1 -> INT_LITERAL
; -> SEMICOLON
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
return -> KEYWORD_RETURN
- -> MINUS
1 -> INT_LITERAL
; -> SEMICOLON
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
