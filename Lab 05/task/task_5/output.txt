# -> SPECIAL CHAR
include -> IDENTIFIER
< -> REL_OP
stdio -> IDENTIFIER
. -> SPECIAL CHAR
h -> IDENTIFIER
> -> REL_OP
 -> SPECIAL CHAR
 -> SPECIAL CHAR
void -> IDENTIFIER
findDuplicates -> IDENTIFIER
( -> LEFT_PAREN
int -> KEYWORD_INT
arr -> IDENTIFIER
[ -> SPECIAL CHAR
] -> SPECIAL CHAR
, -> COMMA
int -> KEYWORD_INT
n -> IDENTIFIER
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
for -> KEYWORD_FOR
( -> LEFT_PAREN
int -> KEYWORD_INT
i -> IDENTIFIER
= -> ASSIGN
0 -> INT_LITERAL
; -> SEMICOLON
i -> IDENTIFIER
< -> REL_OP
n -> IDENTIFIER
; -> SEMICOLON
i -> IDENTIFIER
++ -> INCREMENT
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
int -> KEYWORD_INT
index -> IDENTIFIER
= -> ASSIGN
abs -> IDENTIFIER
( -> LEFT_PAREN
arr -> IDENTIFIER
[ -> SPECIAL CHAR
i -> IDENTIFIER
] -> SPECIAL CHAR
) -> RIGHT_PAREN
- -> MINUS
1 -> INT_LITERAL
; -> SEMICOLON
 -> SPECIAL CHAR
if -> IDENTIFIER
( -> LEFT_PAREN
arr -> IDENTIFIER
[ -> SPECIAL CHAR
index -> IDENTIFIER
] -> SPECIAL CHAR
< -> REL_OP
0 -> INT_LITERAL
) -> RIGHT_PAREN
 -> SPECIAL CHAR
printf -> FUNC_PRINTF
( -> LEFT_PAREN
" -> SPECIAL CHAR
% -> SPECIAL CHAR
d -> IDENTIFIER
is -> IDENTIFIER
duplicate -> IDENTIFIER
\ -> SPECIAL CHAR
n -> IDENTIFIER
" -> SPECIAL CHAR
, -> COMMA
index -> IDENTIFIER
+ -> PLUS
1 -> INT_LITERAL
) -> RIGHT_PAREN
; -> SEMICOLON
 -> SPECIAL CHAR
else -> IDENTIFIER
 -> SPECIAL CHAR
arr -> IDENTIFIER
[ -> SPECIAL CHAR
index -> IDENTIFIER
] -> SPECIAL CHAR
= -> ASSIGN
- -> MINUS
arr -> IDENTIFIER
[ -> SPECIAL CHAR
index -> IDENTIFIER
] -> SPECIAL CHAR
; -> SEMICOLON
 -> SPECIAL CHAR
Â -> SPECIAL CHAR
  -> SPECIAL CHAR
Â -> SPECIAL CHAR
  -> SPECIAL CHAR
Â -> SPECIAL CHAR
  -> SPECIAL CHAR
Â -> SPECIAL CHAR
  -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
} -> RIGHT_BRACE
