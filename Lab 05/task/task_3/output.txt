# -> SPECIAL CHAR
include -> IDENTIFIER
< -> REL_OP
stdio -> IDENTIFIER
. -> SPECIAL CHAR
h -> IDENTIFIER
> -> REL_OP
 -> SPECIAL CHAR
 -> SPECIAL CHAR
void -> KEYWORD_VOID
twoSum -> IDENTIFIER
( -> LEFT_PAREN
int -> KEYWORD_INT
arr -> IDENTIFIER
[ -> SPECIAL CHAR
] -> SPECIAL CHAR
, -> COMMA
int -> KEYWORD_INT
n -> IDENTIFIER
, -> COMMA
int -> KEYWORD_INT
target -> IDENTIFIER
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
for -> KEYWORD_FOR
( -> LEFT_PAREN
int -> KEYWORD_INT
i -> IDENTIFIER
= -> ASSIGN
0 -> INT_LITERAL
; -> SEMICOLON
i -> IDENTIFIER
< -> REL_OP
n -> IDENTIFIER
; -> SEMICOLON
i -> IDENTIFIER
+ -> PLUS
+ -> PLUS
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
for -> KEYWORD_FOR
( -> LEFT_PAREN
int -> KEYWORD_INT
j -> IDENTIFIER
= -> ASSIGN
i -> IDENTIFIER
+ -> PLUS
1 -> INT_LITERAL
; -> SEMICOLON
j -> IDENTIFIER
< -> REL_OP
n -> IDENTIFIER
; -> SEMICOLON
j -> IDENTIFIER
+ -> PLUS
+ -> PLUS
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
if -> KEYWORD_IF
( -> LEFT_PAREN
arr -> IDENTIFIER
[ -> SPECIAL CHAR
i -> IDENTIFIER
] -> SPECIAL CHAR
+ -> PLUS
arr -> IDENTIFIER
[ -> SPECIAL CHAR
j -> IDENTIFIER
] -> SPECIAL CHAR
== -> EQUALS
target -> IDENTIFIER
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
printf -> FUNC_PRINTF
( -> LEFT_PAREN
"Indices: %d, %d\n" -> CHAR_LITERAL
, -> COMMA
i -> IDENTIFIER
, -> COMMA
j -> IDENTIFIER
) -> RIGHT_PAREN
; -> SEMICOLON
 -> SPECIAL CHAR
return -> KEYWORD_RETURN
; -> SEMICOLON
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
