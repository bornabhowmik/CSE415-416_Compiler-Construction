# -> SPECIAL CHAR
include -> IDENTIFIER
< -> REL_OP
stdio -> IDENTIFIER
. -> SPECIAL CHAR
h -> IDENTIFIER
> -> GREATER_THAN
 -> SPECIAL CHAR
 -> SPECIAL CHAR
int -> KEYWORD_INT
lcm -> IDENTIFIER
( -> LEFT_PAREN
int -> KEYWORD_INT
a -> IDENTIFIER
, -> COMMA
int -> KEYWORD_INT
b -> IDENTIFIER
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
int -> KEYWORD_INT
max -> IDENTIFIER
= -> ASSIGN
( -> LEFT_PAREN
a -> IDENTIFIER
> -> GREATER_THAN
b -> IDENTIFIER
) -> RIGHT_PAREN
? -> SPECIAL CHAR
a -> IDENTIFIER
: -> SPECIAL CHAR
b -> IDENTIFIER
; -> SEMICOLON
 -> SPECIAL CHAR
while -> KEYWORD_WHILE
( -> LEFT_PAREN
1 -> INT_LITERAL
) -> RIGHT_PAREN
{ -> LEFT_BRACE
 -> SPECIAL CHAR
if -> IDENTIFIER
( -> LEFT_PAREN
max -> IDENTIFIER
% -> MODULUS
a -> IDENTIFIER
== -> REL_OP
0 -> INT_LITERAL
&& -> LOGICAL_AND
max -> IDENTIFIER
% -> MODULUS
b -> IDENTIFIER
== -> REL_OP
0 -> INT_LITERAL
) -> RIGHT_PAREN
 -> SPECIAL CHAR
return -> KEYWORD_RETURN
max -> IDENTIFIER
; -> SEMICOLON
 -> SPECIAL CHAR
max -> IDENTIFIER
+ -> PLUS
+ -> PLUS
; -> SEMICOLON
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
} -> RIGHT_BRACE
 -> SPECIAL CHAR
